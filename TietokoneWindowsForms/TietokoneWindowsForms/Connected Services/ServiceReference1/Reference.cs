//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TietokoneWindowsForms.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComputerDetails", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ComputerDetails : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CASEIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CPUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GPUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MOBOIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PSUIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RAMIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RAMamountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CASEID {
            get {
                return this.CASEIDField;
            }
            set {
                if ((this.CASEIDField.Equals(value) != true)) {
                    this.CASEIDField = value;
                    this.RaisePropertyChanged("CASEID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CPUID {
            get {
                return this.CPUIDField;
            }
            set {
                if ((this.CPUIDField.Equals(value) != true)) {
                    this.CPUIDField = value;
                    this.RaisePropertyChanged("CPUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GPUID {
            get {
                return this.GPUIDField;
            }
            set {
                if ((this.GPUIDField.Equals(value) != true)) {
                    this.GPUIDField = value;
                    this.RaisePropertyChanged("GPUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MOBOID {
            get {
                return this.MOBOIDField;
            }
            set {
                if ((this.MOBOIDField.Equals(value) != true)) {
                    this.MOBOIDField = value;
                    this.RaisePropertyChanged("MOBOID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PSUID {
            get {
                return this.PSUIDField;
            }
            set {
                if ((this.PSUIDField.Equals(value) != true)) {
                    this.PSUIDField = value;
                    this.RaisePropertyChanged("PSUID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RAMID {
            get {
                return this.RAMIDField;
            }
            set {
                if ((this.RAMIDField.Equals(value) != true)) {
                    this.RAMIDField = value;
                    this.RaisePropertyChanged("RAMID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RAMamount {
            get {
                return this.RAMamountField;
            }
            set {
                if ((this.RAMamountField.Equals(value) != true)) {
                    this.RAMamountField = value;
                    this.RaisePropertyChanged("RAMamount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromCPU", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromCPUResponse")]
        System.Data.DataSet SelectAllDistinctFromCPU();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromCPU", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromCPUResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromCPUAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllByBrandCPU", ReplyAction="http://tempuri.org/IService/SelectAllByBrandCPUResponse")]
        System.Data.DataSet SelectAllByBrandCPU(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllByBrandCPU", ReplyAction="http://tempuri.org/IService/SelectAllByBrandCPUResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBrandCPUAsync(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectByIdFromCPU", ReplyAction="http://tempuri.org/IService/SelectByIdFromCPUResponse")]
        System.Data.DataSet SelectByIdFromCPU(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectByIdFromCPU", ReplyAction="http://tempuri.org/IService/SelectByIdFromCPUResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectByIdFromCPUAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromMOBO", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromMOBOResponse")]
        System.Data.DataSet SelectAllDistinctFromMOBO();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromMOBO", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromMOBOResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromMOBOAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllByBrandMOBO", ReplyAction="http://tempuri.org/IService/SelectAllByBrandMOBOResponse")]
        System.Data.DataSet SelectAllByBrandMOBO(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllByBrandMOBO", ReplyAction="http://tempuri.org/IService/SelectAllByBrandMOBOResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBrandMOBOAsync(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromGPU", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromGPUResponse")]
        System.Data.DataSet SelectAllDistinctFromGPU();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromGPU", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromGPUResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromGPUAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllBySeriesGPU", ReplyAction="http://tempuri.org/IService/SelectAllBySeriesGPUResponse")]
        System.Data.DataSet SelectAllBySeriesGPU(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllBySeriesGPU", ReplyAction="http://tempuri.org/IService/SelectAllBySeriesGPUResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllBySeriesGPUAsync(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromRAM", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromRAMResponse")]
        System.Data.DataSet SelectAllDistinctFromRAM();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromRAM", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromRAMResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromRAMAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllByBrandRAM", ReplyAction="http://tempuri.org/IService/SelectAllByBrandRAMResponse")]
        System.Data.DataSet SelectAllByBrandRAM(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllByBrandRAM", ReplyAction="http://tempuri.org/IService/SelectAllByBrandRAMResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBrandRAMAsync(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromPSU", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromPSUResponse")]
        System.Data.DataSet SelectAllDistinctFromPSU();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromPSU", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromPSUResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromPSUAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllByBrandPSU", ReplyAction="http://tempuri.org/IService/SelectAllByBrandPSUResponse")]
        System.Data.DataSet SelectAllByBrandPSU(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllByBrandPSU", ReplyAction="http://tempuri.org/IService/SelectAllByBrandPSUResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBrandPSUAsync(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectPowerByIdFromPSU", ReplyAction="http://tempuri.org/IService/SelectPowerByIdFromPSUResponse")]
        System.Data.DataSet SelectPowerByIdFromPSU(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectPowerByIdFromPSU", ReplyAction="http://tempuri.org/IService/SelectPowerByIdFromPSUResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectPowerByIdFromPSUAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromCase", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromCaseResponse")]
        System.Data.DataSet SelectAllDistinctFromCase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllDistinctFromCase", ReplyAction="http://tempuri.org/IService/SelectAllDistinctFromCaseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromCaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllByBrandCase", ReplyAction="http://tempuri.org/IService/SelectAllByBrandCaseResponse")]
        System.Data.DataSet SelectAllByBrandCase(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllByBrandCase", ReplyAction="http://tempuri.org/IService/SelectAllByBrandCaseResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBrandCaseAsync(string String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteComputerById", ReplyAction="http://tempuri.org/IService/DeleteComputerByIdResponse")]
        string DeleteComputerById(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DeleteComputerById", ReplyAction="http://tempuri.org/IService/DeleteComputerByIdResponse")]
        System.Threading.Tasks.Task<string> DeleteComputerByIdAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllComputers", ReplyAction="http://tempuri.org/IService/SelectAllComputersResponse")]
        System.Data.DataSet SelectAllComputers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SelectAllComputers", ReplyAction="http://tempuri.org/IService/SelectAllComputersResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> SelectAllComputersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertComputerDetails", ReplyAction="http://tempuri.org/IService/InsertComputerDetailsResponse")]
        string InsertComputerDetails(TietokoneWindowsForms.ServiceReference1.ComputerDetails computerInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/InsertComputerDetails", ReplyAction="http://tempuri.org/IService/InsertComputerDetailsResponse")]
        System.Threading.Tasks.Task<string> InsertComputerDetailsAsync(TietokoneWindowsForms.ServiceReference1.ComputerDetails computerInfo);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : TietokoneWindowsForms.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<TietokoneWindowsForms.ServiceReference1.IService>, TietokoneWindowsForms.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet SelectAllDistinctFromCPU() {
            return base.Channel.SelectAllDistinctFromCPU();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromCPUAsync() {
            return base.Channel.SelectAllDistinctFromCPUAsync();
        }
        
        public System.Data.DataSet SelectAllByBrandCPU(string String) {
            return base.Channel.SelectAllByBrandCPU(String);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBrandCPUAsync(string String) {
            return base.Channel.SelectAllByBrandCPUAsync(String);
        }
        
        public System.Data.DataSet SelectByIdFromCPU(int ID) {
            return base.Channel.SelectByIdFromCPU(ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectByIdFromCPUAsync(int ID) {
            return base.Channel.SelectByIdFromCPUAsync(ID);
        }
        
        public System.Data.DataSet SelectAllDistinctFromMOBO() {
            return base.Channel.SelectAllDistinctFromMOBO();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromMOBOAsync() {
            return base.Channel.SelectAllDistinctFromMOBOAsync();
        }
        
        public System.Data.DataSet SelectAllByBrandMOBO(string String) {
            return base.Channel.SelectAllByBrandMOBO(String);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBrandMOBOAsync(string String) {
            return base.Channel.SelectAllByBrandMOBOAsync(String);
        }
        
        public System.Data.DataSet SelectAllDistinctFromGPU() {
            return base.Channel.SelectAllDistinctFromGPU();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromGPUAsync() {
            return base.Channel.SelectAllDistinctFromGPUAsync();
        }
        
        public System.Data.DataSet SelectAllBySeriesGPU(string String) {
            return base.Channel.SelectAllBySeriesGPU(String);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllBySeriesGPUAsync(string String) {
            return base.Channel.SelectAllBySeriesGPUAsync(String);
        }
        
        public System.Data.DataSet SelectAllDistinctFromRAM() {
            return base.Channel.SelectAllDistinctFromRAM();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromRAMAsync() {
            return base.Channel.SelectAllDistinctFromRAMAsync();
        }
        
        public System.Data.DataSet SelectAllByBrandRAM(string String) {
            return base.Channel.SelectAllByBrandRAM(String);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBrandRAMAsync(string String) {
            return base.Channel.SelectAllByBrandRAMAsync(String);
        }
        
        public System.Data.DataSet SelectAllDistinctFromPSU() {
            return base.Channel.SelectAllDistinctFromPSU();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromPSUAsync() {
            return base.Channel.SelectAllDistinctFromPSUAsync();
        }
        
        public System.Data.DataSet SelectAllByBrandPSU(string String) {
            return base.Channel.SelectAllByBrandPSU(String);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBrandPSUAsync(string String) {
            return base.Channel.SelectAllByBrandPSUAsync(String);
        }
        
        public System.Data.DataSet SelectPowerByIdFromPSU(int ID) {
            return base.Channel.SelectPowerByIdFromPSU(ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectPowerByIdFromPSUAsync(int ID) {
            return base.Channel.SelectPowerByIdFromPSUAsync(ID);
        }
        
        public System.Data.DataSet SelectAllDistinctFromCase() {
            return base.Channel.SelectAllDistinctFromCase();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllDistinctFromCaseAsync() {
            return base.Channel.SelectAllDistinctFromCaseAsync();
        }
        
        public System.Data.DataSet SelectAllByBrandCase(string String) {
            return base.Channel.SelectAllByBrandCase(String);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllByBrandCaseAsync(string String) {
            return base.Channel.SelectAllByBrandCaseAsync(String);
        }
        
        public string DeleteComputerById(int ID) {
            return base.Channel.DeleteComputerById(ID);
        }
        
        public System.Threading.Tasks.Task<string> DeleteComputerByIdAsync(int ID) {
            return base.Channel.DeleteComputerByIdAsync(ID);
        }
        
        public System.Data.DataSet SelectAllComputers() {
            return base.Channel.SelectAllComputers();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> SelectAllComputersAsync() {
            return base.Channel.SelectAllComputersAsync();
        }
        
        public string InsertComputerDetails(TietokoneWindowsForms.ServiceReference1.ComputerDetails computerInfo) {
            return base.Channel.InsertComputerDetails(computerInfo);
        }
        
        public System.Threading.Tasks.Task<string> InsertComputerDetailsAsync(TietokoneWindowsForms.ServiceReference1.ComputerDetails computerInfo) {
            return base.Channel.InsertComputerDetailsAsync(computerInfo);
        }
    }
}
